@using BlazeGate.BlazorWasmApp.Sample.Api
@using BlazeGate.Model.Sample
@using BlazeGate.Model.Sample.EFCore
<Modal Title="@Title" Width="700" Visible="@Visible" ConfirmLoading=Loading OnOk="()=>{Form.Submit();}" OnCancel="()=>{Visible=false;}" MaskClosable=false>
    <Form @ref="Form" Model="Model" Size="FormSize.Default" LabelColSpan="4" OnFinish="OnFinish" Loading=Loading ValidateOnChange>
        <FormItem Label="类型" Rules="new FormValidationRule[]{new FormValidationRule{Required=true}}">
            <AutoComplete Options="DictionaryTypes"
                          FilterExpression="@((option,value)=>option.Label.Contains(value??"", StringComparison.InvariantCultureIgnoreCase))"
                          Value="@context.Type"
                          ValueChanged="async b=>{context.Type=b; await GetMaxNumberIndex();}"
                          AllowFilter />
        </FormItem>
        <FormItem Label="键" Rules="new FormValidationRule[]{new FormValidationRule{Required=true}}">
            <Input @bind-Value="context.Key" AllowClear />
        </FormItem>
        <FormItem Label="值" Rules="new FormValidationRule[]{new FormValidationRule{Required=true}}">
            <Input @bind-Value="context.Value" AllowClear />
        </FormItem>
        <FormItem Label="序号" Rules="new FormValidationRule[]{new FormValidationRule{Required=true}}">
            <AntDesign.InputNumber Style="width:100%" @bind-Value="context.NumberIndex" DefaultValue="0" Min="int.MinValue" Max="int.MaxValue"></AntDesign.InputNumber>
        </FormItem>
        <FormItem Label="扩展">
            <Input @bind-Value="context.Extended" AllowClear />
        </FormItem>
        <FormItem Label="扩展2">
            <Input @bind-Value="context.Extended2" AllowClear />
        </FormItem>
        <FormItem Label="扩展3">
            <Input @bind-Value="context.Extended3" AllowClear />
        </FormItem>
        <FormItem Label="状态">
            <Switch @bind-Checked="context.Enabled" CheckedChildren="启用" UnCheckedChildren="禁用" />
        </FormItem>
    </Form>
</Modal>

@code {
    private string Title { get; set; } = "新增";

    private bool Visible { get; set; } = false;

    private bool Loading { get; set; } = false;

    private Form<TB_Dictionary> Form { get; set; }

    private TB_Dictionary Model { get; set; } = new TB_Dictionary();

    [Inject] private WebApi WebApi { get; set; }

    [Inject] private MessageService Message { get; set; }

    [Parameter] public EventCallback OnComplete { get; set; }

    [Parameter] public IEnumerable<string> DictionaryTypes { get; set; } = new List<string>();


    public async Task ShowAsync(long? id = null)
    {
        Visible = true;
        Model = new TB_Dictionary();
        if (id == null)
        {
            Title = "新增";
        }
        else
        {
            Title = "编辑";
            await LoadDataById(id.Value);
        }
    }

    private async Task LoadDataById(long id)
    {
        if (Loading) return;
        Loading = true;
        try
        {
            var result = await WebApi.Dictionary_QueryByPage(1, 1, new DictionaryQuery { Id = id });
            if (result.Success)
            {
                if (result.Data.DataList.Count > 0)
                {
                    Model = result.Data.DataList[0];
                }
            }
            else
            {
                Message.Error(result.Msg);
            }
        }
        catch (Exception ex)
        {
            Message.Error($"获取数据异常:{ex.Message}");
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task OnFinish(EditContext editContext)
    {
        if (Loading) return;
        Loading = true;
        try
        {
            var result = await WebApi.Dictionary_Save(Model);
            if (result.Success)
            {
                Message.Success(result.Msg);
                Visible = false;
            }
            else
            {
                Message.Error(result.Msg);
            }
        }
        catch (Exception ex)
        {
            Message.Error($"异常:{ex.Message}");
        }
        finally
        {
            Loading = false;
        }

        if (OnComplete.HasDelegate)
        {
            await OnComplete.InvokeAsync();
        }
    }

    private async Task GetMaxNumberIndex()
    {
        if (!"新增".Equals(Title))
        {
            return;
        }

        try
        {
            var result = await WebApi.Dictionary_GetMaxNumberIndexByType(Model.Type);
            if (result.Success)
            {
                Model.NumberIndex = result.Data + 10;
            }
            else
            {
                Message.Error(result.Msg);
            }
        }
        catch (Exception ex)
        {
            Message.Error($"异常:{ex.Message}");
        }
    }
}
