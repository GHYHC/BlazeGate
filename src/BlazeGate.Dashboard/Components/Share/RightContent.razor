@using AntDesign.Extensions.Localization
@using BlazeGate.Dashboard.Resources
@using BlazeGate.Model.Culture
@using BlazeGate.RBAC.Components.Extensions.AuthTokenStorage
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Localization
@using System.Globalization
@inherits AntDomComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

<Space Class="@ClassMapper.Class" Size="@("24")">
    <SpaceItem>
        <AuthorizeView>
            <Authorized>
                <AvatarDropdown Name="@context?.User?.Identity?.Name" MenuItems="AvatarMenuItems" OnItemSelected="HandleSelectUser" />
            </Authorized>
            <NotAuthorized>
                <AvatarDropdown Name="未登录" MenuItems="@(new AvatarMenuItem[] { })" />
            </NotAuthorized>
        </AuthorizeView>
    </SpaceItem>
    <SpaceItem>
        <SelectLang Locales="LanguageOptions.Languages" LanguageLabels="LanguageOptions.LanguageLabels" LanguageIcons="LanguageOptions.LanguageIcons" OnItemSelected="HandleSelectLang" />
    </SpaceItem>
</Space>

@code {
    public AvatarMenuItem[] AvatarMenuItems =>
    [
        new () { Key = "logout", IconType = "logout", Option = L["menu.account.logout"]}
    ];

    [Inject]
    protected NavigationManager NavigationManager { get; set; }

    [Inject]
    private IStringLocalizer<I18n> L { get; set; }

    [Inject]
    protected NavigationManager Navigation { get; set; }

    [Inject]
    ICookieService CookieService { get; set; }

    public void HandleSelectUser(MenuItem item)
    {
        switch (item.Key)
        {
            case "logout":
                NavigationManager.NavigateTo("/api/account/logout", true);
                break;
        }
    }

    public async Task HandleSelectLang(MenuItem item)
    {
        var cultureInfo = CultureInfo.GetCultureInfo(item.Key);

        if (CultureInfo.CurrentCulture.Name != cultureInfo.Name)
        {
            await CookieService.SetCookieAsync(CookieRequestCultureProvider.DefaultCookieName, CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(cultureInfo)), expiresIn: TimeSpan.FromDays(365));

            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }
}
