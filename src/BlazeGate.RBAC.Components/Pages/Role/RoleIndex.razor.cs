// <auto-generated/>
using AntDesign;
using AntDesign.TableModels;
using BlazeGate.Model.Helper;
using BlazeGate.Model.WebApi;
using BlazeGate.Model.WebApi.Request;
using BlazeGate.Model.WebApi.Response;
using BlazeGate.RBAC.Components.Models;
using BlazeGate.Services.Interface;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Localization;
using BlazeGate.RBAC.Components.Resources;

namespace BlazeGate.RBAC.Components.Pages.Role
{
    public partial class RoleIndex
    {

        [Parameter]
        public string ServiceName { get; set; }

        [Inject]
        private IConfiguration Configuration { get; set; }

        private List<RolePageInfo> DataList { get; set; } = new List<RolePageInfo>();
        private bool Loading { get; set; } = false;
        private RoleEdit RoleEdit { get; set; }
        private RolePageQuery SearchModel { get; set; } = new RolePageQuery();
        private Table<RolePageInfo> Table { get; set; }
        private int Total { get; set; } = 0;
        [Inject]
        private IServiceProvider ServiceProvider { get; set; }
        private IRoleService RoleService { get; set; }
        private Dictionary<long, List<PageNode>> RolePageNodes { get; set; } = new Dictionary<long, List<PageNode>>();
        protected override async Task OnInitializedAsync()
        {
            RoleService = ServiceProvider.CreateScope().ServiceProvider.GetRequiredService<IRoleService>();
            if (string.IsNullOrWhiteSpace(ServiceName))
            {
                ServiceName = Configuration["BlazeGate:ServiceName"];
            }
        }

        private async Task OnChange(QueryModel<RolePageInfo> queryModel)
        {
            if (Loading) return;
            Loading = true;
            try
            {
                var result = await RoleService.QueryByPage(ServiceName, queryModel.PageIndex, queryModel.PageSize, SearchModel);
                if (result.Success)
                {
                    DataList = result.Data.DataList;
                    Total = result.Data.Total;

                    //缓存PageNode，避免重复生成PageNode数据
                    RolePageNodes.Clear();
                    DataList.ForEach(x =>
                    {
                        RolePageNodes.Add(x.Role.Id, PageNode.PageToPageNode(x.Pages, null));
                    });
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error(string.Format(L["role.get.error"], ex.Message));
            }
            finally
            {
                Loading = false;
            }
        }
        private async Task OnRemove(long id)
        {
            if (Loading) return;
            Loading = true;
            try
            {
                var result = await RoleService.RemoveById(id, ServiceName);
                if (result.Success)
                {
                    Message.Success(result.Msg);
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error(string.Format(L["role.delete.error"], ex.Message));
            }
            finally
            {
                Loading = false;
            }
        }
    }
}