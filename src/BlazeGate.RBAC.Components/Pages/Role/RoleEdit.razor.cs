// <auto-generated/>
using AntDesign;
using BlazeGate.Model.WebApi.Request;
using BlazeGate.Model.WebApi.Response;
using BlazeGate.RBAC.Components.Models;
using BlazeGate.Services.Interface;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.DependencyInjection;
using System.Linq;

namespace BlazeGate.RBAC.Components.Pages.Role
{
    public partial class RoleEdit
    {
        private bool Loading { get; set; } = false;

        private bool Visible { get; set; } = false;

        [Parameter]
        public EventCallback OnComplete { get; set; }

        [Inject]
        public MessageService Message { get; set; }

        private RoleSave Model { get; set; } = new RoleSave();

        private Form<RoleSave> Form { get; set; }

        private string Title { get; set; } = "新增";

        private Tree<PageNode> Tree { get; set; }
        private List<PageNode> TreeList { get; set; } = new List<PageNode>();
        private List<BlazeGate.Model.EFCore.Page> PageList { get; set; } = new List<BlazeGate.Model.EFCore.Page>();

        [Inject]
        private IServiceProvider ServiceProvider { get; set; }

        [Inject]
        private IPageService PageService { get; set; }

        [Inject]
        private IRoleService RoleService { get; set; }

        protected override Task OnInitializedAsync()
        {
            return base.OnInitializedAsync();
        }

        public async Task ShowAsync(string serviceName, RolePageInfo rolePageInfo)
        {
            Visible = true;

            if (!(PageService is BlazeGate.Services.Implement.Remote.PageService))
            {
                PageService = ServiceProvider.CreateScope().ServiceProvider.GetRequiredService<IPageService>();
            }
            if (!(RoleService is BlazeGate.Services.Implement.Remote.RoleService))
            {
                RoleService = ServiceProvider.CreateScope().ServiceProvider.GetRequiredService<IRoleService>();
            }

            //注意一定要先加载树形菜单，再加载勾选数据
            await LoadTreeList(serviceName);

            Model = new RoleSave();
            Model.ServiceName = serviceName;

            if (rolePageInfo == null)
            {
                Title = L["role.edit.title.add"];
            }
            else
            {
                await LoadData(rolePageInfo);
                Title = L["role.edit.title.edit"];
            }

            StateHasChanged();
        }

        private async Task LoadData(RolePageInfo rolePageInfo)
        {
            if (Loading) return;
            Loading = true;
            try
            {
                RolePageQuery rolePageQuery = new RolePageQuery();
                rolePageQuery.RoleId = rolePageInfo.Role.Id;

                var result = await RoleService.QueryByPage(rolePageInfo.Role.ServiceName, 1, 1, rolePageQuery);
                if (result.Success)
                {
                    var rolePage = result.Data.DataList.FirstOrDefault();
                    if (rolePage != null)
                    {
                        Model.RoleId = rolePage.Role.Id;
                        Model.ServiceId = rolePage.Role.ServiceId;
                        Model.RoleName = rolePage.Role.RoleName;
                        Model.Remark = rolePage.Role.Remark;

                        List<string> checkedKeys = new List<string>();

                        //获取已经勾选的最后一级菜单
                        var pageIds = rolePage.Pages.Select(b => b.Id.ToString()).ToArray();
                        foreach (var item in pageIds)
                        {
                            if (!PageList.Any(p => p.ParentPageId == Convert.ToInt64(item)))
                            {
                                checkedKeys.Add(item);
                            }
                        }

                        Model.PageIds = checkedKeys.ToArray();
                    }
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error(string.Format(L["role.edit.get.error"], ex.Message));
            }
            finally
            {
                Loading = false;
            }
        }

        private async Task OnFinish(EditContext editContext)
        {
            if (Loading) return;
            Loading = true;
            try
            {
                List<string> pageIds = new List<string>();

                foreach (var key in Tree.CheckedKeys)
                {
                    pageIds.Add(key);
                    pageIds.AddRange(GetParentId(key));
                }

                Model.PageIds = pageIds.Distinct().ToArray();

                var result = await RoleService.SaveRole(Model.ServiceName, Model);
                if (result.Success)
                {
                    Message.Success(result.Msg);
                    Visible = false;
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error(string.Format(L["role.edit.save.error"], ex.Message));
            }
            finally
            {
                Loading = false;
            }

            if (OnComplete.HasDelegate)
            {
                await OnComplete.InvokeAsync();
            }
        }

        private async Task LoadTreeList(string serviceName)
        {
            if (Loading) return;
            Loading = true;
            try
            {
                var result = await PageService.GetPageByServiceName(serviceName);
                if (result.Success)
                {
                    PageList = result.Data;
                    TreeList = PageNode.PageToPageNode(result.Data, null);
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error(string.Format(L["role.edit.page.get.error"], ex.Message));
            }
            finally
            {
                Loading = false;
            }
        }

        /// <summary>
        /// 递归获取父级ID
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public List<string> GetParentId(string id)
        {
            List<string> result = new List<string>();
            var page = PageList.Where(b => b.Id.ToString() == id).FirstOrDefault();
            if (page != null && page.ParentPageId != 0)
            {
                result.Add(page.ParentPageId.ToString());
                result.AddRange(GetParentId(page.ParentPageId.ToString()));
            }
            return result;
        }
    }
}