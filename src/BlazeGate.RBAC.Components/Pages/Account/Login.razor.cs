// <auto-generated/>
using AntDesign;
using BlazeGate.Model.JwtBearer;
using BlazeGate.Model.WebApi.Request;
using BlazeGate.Model.WebApi;
using BlazeGate.Services.Interface;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Configuration;
using System.Text.Json;
using System.Text;
using Microsoft.AspNetCore.Components.Authorization;
using BlazeGate.RBAC.Components.Extensions;
using BlazeGate.RBAC.Components.Extensions.Authentication;

namespace BlazeGate.RBAC.Components.Pages.Account
{
    public partial class Login
    {
        private bool Loading { get; set; } = false;

        private LoginParam Model { get; set; } = new LoginParam();

        [Inject]
        private IAccountService AccountService { get; set; }

        [Inject]
        public MessageService Message { get; set; }

        [Inject]
        private NavigationManager NavigationManager { get; set; }

        [Inject]
        private IAuthTokenStorageServices AuthTokenStorage { get; set; }

        [Inject]
        private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

        [Parameter]
        [SupplyParameterFromQuery(Name = "returnUrl")]
        public string ReturnUrl { get; set; } = "/";

        [Inject]
        private IConfiguration Configuration { get; set; }

        public string ServiceName { get; set; }

        protected override async Task OnInitializedAsync()
        {
            ServiceName = Configuration["BlazeGate:ServiceName"];
        }

        private async Task HandleSubmit()
        {
            if (Loading) return;
            Loading = true;
            try
            {
                var data = JsonSerializer.Deserialize<LoginParam>(JsonSerializer.Serialize(Model));
                data.Password = GetMD5Hash(data.Password);
                data.ServiceName = ServiceName;
                ApiResult<AuthTokenDto> result = await AccountService.Login(data);
                if (result.Success)
                {
                    //保存AuthToken
                    await AuthTokenStorage.SetAuthToken(result.Data);

                    //刷新认证状态
                    if (AuthenticationStateProvider is CustomAuthenticationStateProvider)
                    {
                        CustomAuthenticationStateProvider provider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
                        AuthenticationState authenticationState = await provider.GetAuthenticationStateAsync();
                        provider.NotifyAuthenticationStateChanged(Task.FromResult(authenticationState));
                    }

                    NavigationManager.NavigateTo(ReturnUrl ?? "/");
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error($"登录异常:{ex.Message}");
            }
            finally
            {
                Loading = false;
            }
        }

        public string GetMD5Hash(string input)
        {
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            byte[] hashBytes = MD5Encrypt.ComputeHash(inputBytes);

            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < hashBytes.Length; i++)
            {
                sb.Append(hashBytes[i].ToString("X2")); // 将每个字节转换为16进制字符串
            }

            return sb.ToString();
        }
    }
}