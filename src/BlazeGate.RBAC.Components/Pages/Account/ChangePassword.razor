@page "/changePassword"
@using BlazeGate.Model.WebApi.Request
@using BlazeGate.RBAC.Components.Extensions
@using Microsoft.AspNetCore.Components.Forms
@using System.Text
@attribute [ReuseTabsPage(Title = "修改密码")]
<Card Title="修改密码">
    <Form Model="SaveModel" Size="FormSize.Default" LabelColSpan="3" WrapperColSpan="18" OnFinish="OnFinish" Loading=Loading ValidateMode="@FormValidateMode.Complex" ValidateOnChange>
        <FormItem Label="旧密码">
            <InputPassword @bind-Value="context.OldPassword" AllowClear />
        </FormItem>
        <FormItem Label="新密码">
            <InputPassword @bind-Value="context.NewPassword" AllowClear />
        </FormItem>
        <FormItem Label="确认新密码">
            <InputPassword @bind-Value="context.ConfirmPassword" AllowClear />
        </FormItem>
        <FormItem WrapperColOffset="3" WrapperColSpan="18">
            <Button Type="ButtonType.Primary" HtmlType="submit" Class="submit" Size="ButtonSize.Default">确认修改</Button>
        </FormItem>
    </Form>
</Card>

@code {
    [Inject]
    private ReuseTabsService ReuseTabsService { get; set; }

    [Inject]
    private MessageService Message { get; set; }

    [Inject]
    private IAccountService AccountService { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private ModalService ModalService { get; set; }

    private ChangePasswordParam SaveModel { get; set; } = new ChangePasswordParam();

    private bool Loading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        ReuseTabsService.UpdatePage("/changePassword", options =>
        {
            options.Title =@<span><Icon Type="edit" Theme="IconThemeType.Outline" />修改密码</span> ;
        });
    }

    private async Task OnFinish(EditContext editContext)
    {
        if (Loading) return;
        Loading = true;
        try
        {
            var param = new ChangePasswordParam
            {
                OldPassword = GetMD5Hash(SaveModel.OldPassword),
                NewPassword = GetMD5Hash(SaveModel.NewPassword),
                ConfirmPassword = GetMD5Hash(SaveModel.ConfirmPassword)
            };

            var result = await AccountService.ChangePassword(param);
            if (result.Success)
            {
                ConfirmOptions options = new ConfirmOptions
                {
                    Title = "修改密码",
                    Content = "密码修改成功，请重新登录。",
                };

                await ModalService.SuccessAsync(options);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                Message.Error(result.Msg);
            }
        }
        catch (Exception ex)
        {
            Message.Error($"异常:{ex.Message}");
        }
        finally
        {
            Loading = false;
        }
    }

    public string GetMD5Hash(string input)
    {
        byte[] inputBytes = Encoding.UTF8.GetBytes(input);
        byte[] hashBytes = MD5Encrypt.ComputeHash(inputBytes);

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hashBytes.Length; i++)
        {
            sb.Append(hashBytes[i].ToString("X2")); // 将每个字节转换为16进制字符串
        }

        return sb.ToString();
    }
}
