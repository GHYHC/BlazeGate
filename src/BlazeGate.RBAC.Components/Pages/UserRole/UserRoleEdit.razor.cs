// <auto-generated/>
using AntDesign;
using BlazeGate.Model.Helper;
using BlazeGate.Model.JwtBearer;
using BlazeGate.Model.WebApi;
using BlazeGate.Model.WebApi.Request;
using BlazeGate.Model.WebApi.Response;
using BlazeGate.Services.Interface;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace BlazeGate.RBAC.Components.Pages.UserRole
{
    public partial class UserRoleEdit
    {
        private bool Loading { get; set; } = false;

        private bool Visible { get; set; } = false;

        [Parameter]
        public EventCallback OnComplete { get; set; }

        [Inject]
        public MessageService Message { get; set; }

        private Form<UserRoleSave> Form { get; set; }

        private string Title { get; set; } = "ÐÂÔö";

        private List<UserInfo> UserInfoList { get; set; } = new List<UserInfo>();

        private bool SearchLoading { get; set; }

        private UserRoleSave UserRoleSave { get; set; } = new UserRoleSave();

        [Inject]
        private IServiceProvider ServiceProvider { get; set; }
        private IUserRoleService UserRoleService { get; set; }
        private IUserService UserService { get; set; }

        private List<BlazeGate.Model.EFCore.Role> Roles { get; set; } = new List<Model.EFCore.Role>();

        public async Task ShowAsync(string serviceName, UserRoleInfo userRoleInfo)
        {
            Visible = true;

            UserRoleService = ServiceProvider.CreateScope().ServiceProvider.GetRequiredService<IUserRoleService>();
            UserService = ServiceProvider.CreateScope().ServiceProvider.GetRequiredService<IUserService>();

            UserRoleSave = new UserRoleSave();
            UserRoleSave.ServiceName = serviceName;

            await LoadRole(serviceName);
            await OnSearch(userRoleInfo?.User?.Account);
            if (userRoleInfo == null)
            {
                UserRoleSave.IsAdd = true;
                Title = L["userRole.edit.title.add"];
            }
            else
            {
                UserRoleSave.IsAdd = false;
                await LoadData(userRoleInfo);
                Title = L["userRole.edit.title.edit"];
            }
        }

        private async Task LoadRole(string serviceName)
        {
            try
            {
                var result = await UserRoleService.GetRoleByServiceName(serviceName);
                if (result.Success)
                {
                    Roles = result.Data;
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error(string.Format(L["userRole.edit.get.error"], ex.Message));
            }
        }

        private async Task LoadData(UserRoleInfo userRoleInfo)
        {
            if (Loading) return;
            Loading = true;
            try
            {
                UserRoleQuery userQuery = new UserRoleQuery()
                {
                    UserId = userRoleInfo.User.Id,
                };
                var result = await UserRoleService.QueryByPage(UserRoleSave.ServiceName,1, 1, userQuery);
                if (result.Success)
                {
                    var userRole = result.Data.DataList.FirstOrDefault();
                    UserRoleSave.UserId = userRole.User.Id;
                    UserRoleSave.RoleIds = userRole.Roles.Select(p => p.Id).ToList();
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error(string.Format(L["userRole.edit.get.error"], ex.Message));
            }
            finally
            {
                Loading = false;
            }
        }

        private async Task OnSearch(string value)
        {
            if (SearchLoading) return;
            SearchLoading = true;
            StateHasChanged();
            try
            {
                UserQuery query = new UserQuery()
                {
                    NameOrAccount = value,
                };

                var result = await UserService.QueryByPage(UserRoleSave.ServiceName, 1, 20, query);
                UserInfoList = result.Data.DataList;
            }
            catch (Exception ex)
            {
                Message.Error(string.Format(L["userRole.edit.get.error"], ex.Message));
            }
            finally
            {
                SearchLoading = false;
                StateHasChanged();
            }
        }

        private async Task OnFinish(EditContext editContext)
        {
            if (Loading) return;
            Loading = true;
            try
            {
                var result = await UserRoleService.SaveUserRole(UserRoleSave.ServiceName,UserRoleSave);
                if (result.Success)
                {
                    Message.Success(result.Msg);
                    Visible = false;
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error(string.Format(L["userRole.edit.action.error"], ex.Message));
            }
            finally
            {
                Loading = false;
            }

            if (OnComplete.HasDelegate)
            {
                await OnComplete.InvokeAsync();
            }
        }
    }
}