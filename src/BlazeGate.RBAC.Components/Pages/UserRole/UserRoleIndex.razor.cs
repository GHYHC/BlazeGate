// <auto-generated/>
using AntDesign.TableModels;
using AntDesign;
using BlazeGate.Model.Helper;
using BlazeGate.Model.WebApi.Request;
using BlazeGate.Model.WebApi;
using BlazeGate.RBAC.Components.Pages.User;
using Microsoft.AspNetCore.Components;
using BlazeGate.Services.Interface;
using Microsoft.Extensions.DependencyInjection;
using BlazeGate.Model.EFCore;
using BlazeGate.Model.WebApi.Response;
using Microsoft.Extensions.Configuration;

namespace BlazeGate.RBAC.Components.Pages.UserRole
{
    public partial class UserRoleIndex
    {
        [Parameter]
        public string ServiceName { get; set; }
        private bool Loading { get; set; } = false;
        UserRoleQuery SearchModel { get; set; } = new UserRoleQuery();
        private Table<UserRoleInfo> Table { get; set; }
        private int Total { get; set; } = 0;
        private List<UserRoleInfo> DataList { get; set; } = new List<UserRoleInfo>();

        private UserRoleEdit UserRoleEdit { get; set; }

        [Inject]
        private IServiceProvider ServiceProvider { get; set; }

        [Inject]
        private IUserRoleService UserRoleService { get; set; }

        [Inject]
        private IConfiguration Configuration { get; set; }

        protected override async Task OnInitializedAsync()
        {
            if (!(UserRoleService is BlazeGate.Services.Implement.Remote.UserRoleService))
            {
                UserRoleService = ServiceProvider.CreateScope().ServiceProvider.GetRequiredService<IUserRoleService>();
            }

            if (string.IsNullOrWhiteSpace(ServiceName))
            {
                ServiceName = Configuration["BlazeGate:ServiceName"];
            }
        }

        private async Task OnChange(QueryModel<UserRoleInfo> queryModel)
        {
            if (Loading) return;
            Loading = true;
            try
            {
                var result = await UserRoleService.QueryByPage(ServiceName, queryModel.PageIndex, queryModel.PageSize, SearchModel);
                if (result.Success)
                {
                    DataList = result.Data.DataList;
                    Total = result.Data.Total;
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error(string.Format(L["userRole.index.get.error"], ex.Message));
            }
            finally
            {
                Loading = false;
            }
        }

        private async Task OnRemove(long id)
        {
            if (Loading) return;
            Loading = true;
            try
            {
                var result = await UserRoleService.RemoveById(id, ServiceName);
                if (result.Success)
                {
                    Message.Success(result.Msg);
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error(string.Format(L["userRole.index.delete.error"], ex.Message));
            }
            finally
            {
                Loading = false;
            }
        }
    }
}