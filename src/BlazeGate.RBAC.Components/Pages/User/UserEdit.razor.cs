// <auto-generated/>
using AntDesign;
using BlazeGate.Model.Helper;
using BlazeGate.Model.WebApi.Request;
using BlazeGate.RBAC.Components.Extensions;
using BlazeGate.Services.Interface;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System.Text;
using System.Text.Json;
using System.Text.Unicode;

namespace BlazeGate.RBAC.Components.Pages.User
{
    public partial class UserEdit
    {

        [Inject]
        private IServiceProvider ServiceProvider { get; set; }
        private IUserService UserService { get; set; }
        private UserSave UserSave { get; set; } = new UserSave();
        private Form<UserSave> Form { get; set; }
        private bool Loading { get; set; } = false;
        private bool Visible { get; set; } = false;
        [Parameter]
        public EventCallback OnComplete { get; set; }
        [Inject]
        public MessageService Message { get; set; }
        private string Title { get; set; } = "新增";

        public string ServiceName { get; set; }

        [Inject]
        private IConfiguration Configuration { get; set; }

        protected override async Task OnInitializedAsync()
        {
            ServiceName = Configuration["BlazeGate:ServiceName"];
        }

        public async Task ShowAsync(long? id = null)
        {
            Visible = true;

            UserService = ServiceProvider.CreateScope().ServiceProvider.GetRequiredService<IUserService>();

            UserSave = new UserSave();

            if (id == null)
            {
                Title = "新增";
            }
            else
            {
                Title = "编辑";
                await LoadDataById(id.Value);
            }
        }

        private async Task LoadDataById(long id)
        {
            if (Loading) return;
            Loading = true;
            try
            {
                var result = await UserService.QueryByPage(ServiceName, 1, 1, new UserQuery { UserId = id });
                if (result.Success)
                {
                    if (result.Data.DataList.Count > 0)
                    {
                        UserSave = JsonSerializer.Deserialize<UserSave>(JsonSerializer.Serialize(result.Data.DataList[0]));
                        UserSave.Password = UserSave.DefaultPassword;
                    }
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error($"获取数据异常:{ex.Message}");
            }
            finally
            {
                Loading = false;
            }
        }

        private async Task OnFinish(EditContext editContext)
        {
            if (Loading) return;
            Loading = true;
            try
            {
                var param = JsonSerializer.Deserialize<UserSave>(JsonSerializer.Serialize(UserSave));
                if (!UserSave.DefaultPassword.Equals(param.Password))
                {
                    param.Password = MD5Encrypt.ComputeHashString(Encoding.UTF8.GetBytes(param.Password));
                }
                var result = await UserService.SaveUser(ServiceName, param);
                if (result.Success)
                {
                    Message.Success(result.Msg);
                    Visible = false;
                }
                else
                {
                    Message.Error(result.Msg);
                }
            }
            catch (Exception ex)
            {
                Message.Error($"异常:{ex.Message}");
            }
            finally
            {
                Loading = false;
            }

            if (OnComplete.HasDelegate)
            {
                await OnComplete.InvokeAsync();
            }
        }
    }
}