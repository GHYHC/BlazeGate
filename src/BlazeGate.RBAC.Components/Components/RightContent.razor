@using BlazeGate.Model.Culture
@using BlazeGate.Model.JwtBearer
@using BlazeGate.RBAC.Components.Extensions.Authentication
@using BlazeGate.RBAC.Components.Resources
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.Extensions.Configuration
@using System.Globalization
@using Microsoft.Extensions.Localization
@using Microsoft.JSInterop
@inherits AntDomComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

<Space Class="@ClassMapper.Class" Size="@("24")">
    <SpaceItem>
        <AuthorizeView>
            <Authorized>
                <AvatarDropdown Name="@context?.User?.GetUser()?.UserName" MenuItems="AvatarMenuItems" OnItemSelected="HandleSelectUser" />
            </Authorized>
            <NotAuthorized>
                <AvatarDropdown Name="@(L["menu.account.notLoggedIn"])" MenuItems="@(new AvatarMenuItem[] { })" />
            </NotAuthorized>
        </AuthorizeView>
    </SpaceItem>
    <SpaceItem>
        <SelectLang Locales="LanguageOptions.Languages" LanguageLabels="LanguageOptions.LanguageLabels" LanguageIcons="LanguageOptions.LanguageIcons" OnItemSelected="HandleSelectLang" />
    </SpaceItem>
</Space>

@code {
    public AvatarMenuItem[] AvatarMenuItems =>
    [
        new() { Key = "changePassword", IconType = "edit", Option = L["menu.account.changePassword"]},
        new() { Key = "logout", IconType = "logout", Option = L["menu.account.logout"]}
    ];

    [Inject]
    protected NavigationManager NavigationManager { get; set; }

    [Inject]
    private IAccountService AccountService { get; set; }

    [Inject]
    private IAuthTokenStorageServices AuthTokenStorage { get; set; }

    [Inject]
    private IConfiguration Configuration { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }

    [Inject]
    private IStringLocalizer<I18n> L { get; set; }

    public string ServiceName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ServiceName = Configuration["BlazeGate:ServiceName"];
    }

    public async Task HandleSelectUser(MenuItem item)
    {
        switch (item.Key)
        {
            case "logout":
                await Logout();
                break;
            case "changePassword":
                await ChangePassword();
                break;
        }
    }

    public async Task Logout()
    {
        try
        {
            var token = await AuthTokenStorage.GetAuthToken();
            await AccountService.Logout(ServiceName, token);
        }
        catch (Exception ex)
        {
        }
        await AuthTokenStorage.SetAuthToken(null);
        NavigationManager.NavigateTo("/login");
    }

    public async Task ChangePassword()
    {
        NavigationManager.NavigateTo("/changePassword");
    }

    public async Task HandleSelectLang(MenuItem item)
    {
        var cultureInfo = CultureInfo.GetCultureInfo(item.Key);

        if (CultureInfo.CurrentCulture.Name != cultureInfo.Name)
        {
            await JS.InvokeVoidAsync("blazorCulture.set", cultureInfo.Name);

            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }
}
